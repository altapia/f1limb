---
import Exclamation from "@/icons/Exclamation.astro"
import { ClasificacionService } from "@/lib/clasificacionService"

const { gpId, idTemporada } = Astro.props

let clasificacionService = new ClasificacionService()
const listClasificacion = await clasificacionService.getClasificacionIndividual(
	idTemporada,
	gpId ?? null
)
let total = 0
listClasificacion.map((a) => {
	total += a.ganancia ?? 0
})
total = Math.round(total * 100) / 100
---

<article class="flex flex-col justify-center">
	<h2 class="mb-5 text-center text-3xl font-bold">Clasificación individual</h2>

	{
		listClasificacion.length > 0 && (
			<ul class="mx-auto max-w-[40rem]">
				{listClasificacion.map((a, i) => (
					<li class="grid grid-cols-[.3fr_1fr_.5fr_1fr] gap-4 hover:bg-gray-300">
						<div class="text-right">{i + 1}</div>
						<div>
							{a.participante?.user?.nombre}{" "}
							<small class={"rounded-lg bg-gray-200 p-1 text-xs "}>
								{a.participante?.team?.nombre}
							</small>
						</div>
						<div class="text-right">{a.ganancia ? Math.round(a.ganancia * 100) / 100 : ""}€</div>
						<div>
							{a.puntos} pts.
							{gpId && a.ganancia == -3 && (
								<span class="rounded bg-gray-500 p-1 text-xs text-white">DNF</span>
							)}
						</div>
					</li>
				))}
				<li class="text-center font-semibold">Total: {total}€</li>
			</ul>
		)
	}

	{
		listClasificacion.length == 0 && (
			<div class="flex bg-gray-300 p-5">
				<i>
					<Exclamation class="mr-1 h-5 w-5 text-black" />
				</i>{" "}
				Clasificación no disponible
			</div>
		)
	}
</article>
