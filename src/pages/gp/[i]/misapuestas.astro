---
export const prerender = false //Se renderiza en el servidor

import HeroGP from "@/components/HeroGP.astro"
import Annotation from "@/icons/Annotation.astro"
import Login from "@/icons/Login.astro"
import Sort from "@/icons/Sort.astro"
import Layout from "@/layouts/Layout.astro"
import { ApuestaService } from "@/lib/apuestaService"
import { ConfigService } from "@/lib/configService"
import { GpService } from "@/lib/gpService"
import { ParticipanteService } from "@/lib/participanteService"
import { sendAdminTelegramMessage } from "@/lib/utils"
import ListaApuestasGPUser from "@/sections/ListaApuestasGPUser.astro"
import Nav from "@/sections/Nav.astro"
import { getSession } from "auth-astro/server"

const session = await getSession(Astro.request)
const { i } = Astro.params
const gpId = parseInt(i || "0")

let gpService = new GpService()
const participanteService = new ParticipanteService()
let configService = new ConfigService()
let apuestaService = new ApuestaService()

const gp = await gpService.getGp(gpId)

const emailUser = session?.user?.email ?? null
if (!emailUser) {
	return new Response(JSON.stringify({ message: "Usuario no autorizado" }), { status: 401 })
}
let participante = await participanteService.getByEmail(emailUser, gp.temporada?.id ?? 0)
if (!participante) {
	return new Response(JSON.stringify({ message: "Usuario no autorizado" }), { status: 401 })
}

let descripcion: string | null
let importe: number | null

const maxImporte = await configService.getMaxImporteApuesta(gp.temporada?.id ?? 0)
const totalApostado: number = await apuestaService.getTotalApostadoGpUser(gpId, participante.id!)
const importeDisponible = Math.round((maxImporte - totalApostado) * 100) / 100

const errors = { descripcion: "", importe: "", general: "" }

if (Astro.request.method === "POST") {
	const data = await Astro.request.formData()

	if (data.get("_method") === "delete") {
		const id = data.get("id")
		const gpId = data.get("gpId")

		if (!gpId) {
			errors.general += "El GP es obligatorio"
		}
		if (!id) {
			errors.general += "El ID de la apuesta a eliminar es obligatorio"
		}
		if (!participante.id) {
			errors.general += "Usuario no autorizado"
		}
		if (!id || !participante.id) {
			return new Response(JSON.stringify({ message: "Missing required fields" }), { status: 400 })
		}

		apuestaService.deleteByIdAndParticipanteIdWithoutCuota(parseInt(id.toString()), participante.id)

		return Astro.redirect("/gp/" + gpId + "/misapuestas")
	} else {
		try {
			const gpId = data.get("gpId")
			const temp = data.get("importe")?.toString()
			descripcion = data.get("descripcion")?.toString() ?? null
			importe = temp ? parseFloat(temp) : null

			if (typeof descripcion !== "string" || descripcion.length < 1) {
				errors.descripcion += "La descripción es obligatoria"
			}

			if (!importe || importe <= 0) {
				errors.importe += "El importe es obligatorio"
			}
			if (importe && importe > importeDisponible) {
				errors.importe += `El importe disponible es ${importeDisponible}€ y has intentado apostar ${importe}€`
			}

			if (!gpId) {
				errors.general += "El GP es obligatorio"
			}
			if (!participante.id) {
				errors.general += "Usuario no autorizado"
			}

			const hasErrors = Object.values(errors).some((msg) => msg)
			if (!hasErrors && descripcion && importe && gpId) {
				await apuestaService.insertApuestaUser(
					participante.id!,
					parseInt(gpId.toString()),
					descripcion,
					importe
				)

				if (importeDisponible - importe == 0) {
					await sendAdminTelegramMessage(
						`ℹ️El usuario ${participante.user?.nombre} ha apostdo todo para el GP de ${gp.nombre}.`
					)
				}

				return Astro.redirect("/gp/" + gpId + "/misapuestas")
			}
		} catch (error) {
			if (error instanceof Error) {
				console.error(error.message)
			}
		}
	}
}
---

<Layout title="F1 Limb">
	<Nav idTemporada={gp.temporada?.id} nombreTemporada={gp.temporada?.nombre} />
	<main class="mx-auto max-w-6xl px-2 pt-16 md:pt-20 lg:px-10">
		<h2 class="mb-5 text-center text-xl font-bold">Mis apuestas del GP</h2>
		<HeroGP gp={gp} />
		<section class="mx-auto my-10 flex max-w-6xl justify-center">
			<a
				href={"/gp/" + gpId}
				title={"Apuestas de " + gp.nombre}
				class="flex bg-teal-800 p-3 text-white hover:bg-teal-500 hover:text-black"
			>
				<i><Annotation class="mr-1 h-5 w-5 text-white" /></i>
				Apuestas
			</a>
			<a
				href={"/clasificacion/" + gpId}
				title={"Clasificación " + gp.nombre}
				class="ml-5 flex items-center bg-teal-800 p-3 text-white hover:bg-teal-500 hover:text-black"
			>
				<i><Sort class="mr-1 h-5 w-5 text-white" /></i>
				Clasificación del GP
			</a>
		</section>

		{
			session ? (
				<>
					<ListaApuestasGPUser
						gpId={gpId}
						participante={participante}
						errors={errors}
						importeDisponible={importeDisponible}
						descripcion={descripcion!}
						importe={importe!}
					/>
				</>
			) : (
				<section class="bg-gray-100 p-20">
					<button class="login mx-auto flex p-2 font-bold text-teal-700 hover:underline">
						<Login class="mr-1 h-5 w-5" />
						Haz Login para apostar
					</button>
				</section>
			)
		}
	</main>
</Layout>
